generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                       String                    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  name                     String
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  fiscalYears              FiscalYear[]
  accounts                 Account[]
  journals                 Journal[]
  entries                  Entry[]
  entryLines               EntryLine[]
  attachments              Attachment[]
  memberships              UserOrgRole[]
  refreshTokens            RefreshToken[]
  sequences                SequenceNumber[]
  fecExports               FecExport[]
  bankAccounts             BankAccount[]
  bankStatements           BankStatement[]
  bankTransactions         BankTransaction[]
  ofxRules                 OfxRule[]
  members                  Member[]
  membershipFeeTemplates   MembershipFeeTemplate[]
  memberFeeAssignments     MemberFeeAssignment[]
  memberPayments           MemberPayment[]
  donations                Donation[]
  donationReceiptSequences DonationReceiptSequence[]
  projects                Project[]
  projectPeriods          ProjectPeriod[]

  @@map("organization")
}

model FiscalYear {
  id                       String                    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId           String                    @map("organization_id") @db.Uuid
  label                    String
  startDate                DateTime                  @map("start_date")
  endDate                  DateTime                  @map("end_date")
  lockedAt                 DateTime?                 @map("locked_at")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  organization             Organization              @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  entries                  Entry[]
  sequences                SequenceNumber[]
  fecExports               FecExport[]
  donations                Donation[]
  donationReceiptSequences DonationReceiptSequence[]

  @@unique([organizationId, label], map: "fiscal_year_org_label_key")
  @@index([organizationId, startDate], map: "fiscal_year_org_start_idx")
  @@map("fiscal_year")
}

model Account {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  code           String
  name           String
  type           String
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  entryLines     EntryLine[]
  bankAccount    BankAccount?

  @@unique([organizationId, code], map: "account_org_code_key")
  @@index([organizationId, type], map: "account_org_type_idx")
  @@map("account")
}

model Journal {
  id             String           @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String           @map("organization_id") @db.Uuid
  code           String
  name           String
  type           String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  entries        Entry[]
  sequences      SequenceNumber[]

  @@unique([organizationId, code], map: "journal_org_code_key")
  @@index([organizationId, type], map: "journal_org_type_idx")
  @@map("journal")
}

model Entry {
  id                   String                @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId       String                @map("organization_id") @db.Uuid
  fiscalYearId         String                @map("fiscal_year_id") @db.Uuid
  journalId            String                @map("journal_id") @db.Uuid
  date                 DateTime
  reference            String?               @map("ref")
  memo                 String?
  lockedAt             DateTime?             @map("locked_at")
  createdBy            String?               @map("created_by")
  bankStatementId      String?               @map("bank_statement_id") @db.Uuid
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  fiscalYear           FiscalYear            @relation(fields: [fiscalYearId], references: [id], onDelete: Restrict)
  journal              Journal               @relation(fields: [journalId], references: [id], onDelete: Restrict)
  lines                EntryLine[]
  attachments          Attachment[]
  bankStatement        BankStatement?        @relation(fields: [bankStatementId], references: [id], onDelete: SetNull)
  bankMatches          BankTransaction[]     @relation("BankTransactionMatchedEntry")
  memberFeeAssignments MemberFeeAssignment[]
  memberPayments       MemberPayment[]
  donations            Donation[]

  @@index([organizationId, date], map: "entry_org_date_idx")
  @@index([organizationId, fiscalYearId], map: "entry_org_fiscal_year_idx")
  @@index([organizationId, journalId, date], map: "entry_org_journal_date_idx")
  @@index([organizationId, bankStatementId], map: "entry_org_bank_statement_idx")
  @@map("entry")
}

model BankAccount {
  id             String            @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String            @map("organization_id") @db.Uuid
  accountId      String            @unique @map("account_id") @db.Uuid
  name           String
  iban           String
  bic            String?
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  account        Account           @relation(fields: [accountId], references: [id], onDelete: Restrict)
  statements     BankStatement[]
  transactions   BankTransaction[]
  ofxRules       OfxRule[]

  @@unique([organizationId, accountId], map: "bank_account_org_account_key")
  @@unique([organizationId, iban], map: "bank_account_org_iban_key")
  @@index([organizationId], map: "bank_account_org_idx")
  @@map("bank_account")
}

model BankStatement {
  id             String            @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String            @map("organization_id") @db.Uuid
  bankAccountId  String            @map("bank_account_id") @db.Uuid
  statementDate  DateTime          @map("statement_date")
  openingBalance Decimal           @map("opening_balance") @db.Decimal(16, 2)
  closingBalance Decimal           @map("closing_balance") @db.Decimal(16, 2)
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  bankAccount    BankAccount       @relation(fields: [bankAccountId], references: [id], onDelete: Restrict)
  entries        Entry[]
  transactions   BankTransaction[]

  @@unique([bankAccountId, statementDate], map: "bank_statement_account_date_key")
  @@index([organizationId, bankAccountId], map: "bank_statement_org_account_idx")
  @@map("bank_statement")
}

model BankTransaction {
  id              String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId  String         @map("organization_id") @db.Uuid
  bankAccountId   String         @map("bank_account_id") @db.Uuid
  bankStatementId String?        @map("bank_statement_id") @db.Uuid
  fitId           String         @map("fitid")
  valueDate       DateTime       @map("value_date")
  amount          Decimal        @db.Decimal(16, 2)
  rawLabel        String         @map("raw_label")
  normalizedLabel String?        @map("normalized_label")
  memo            String?
  matchedEntryId  String?        @map("matched_entry_id") @db.Uuid
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  bankAccount     BankAccount    @relation(fields: [bankAccountId], references: [id], onDelete: Restrict)
  bankStatement   BankStatement? @relation(fields: [bankStatementId], references: [id], onDelete: SetNull)
  matchedEntry    Entry?         @relation("BankTransactionMatchedEntry", fields: [matchedEntryId], references: [id], onDelete: SetNull)

  @@unique([bankAccountId, fitId, amount, valueDate], map: "bank_transaction_dedup_key")
  @@index([organizationId, bankAccountId, valueDate], map: "bank_transaction_org_account_date_idx")
  @@map("bank_transaction")
}

model OfxRule {
  id              String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId  String       @map("organization_id") @db.Uuid
  bankAccountId   String?      @map("bank_account_id") @db.Uuid
  pattern         String
  normalizedLabel String       @map("normalized_label")
  priority        Int          @default(0)
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)

  @@index([organizationId, priority], map: "ofx_rule_org_priority_idx")
  @@index([organizationId, bankAccountId], map: "ofx_rule_org_account_idx")
  @@map("ofx_rule")
}

model SequenceNumber {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  fiscalYearId   String       @map("fiscal_year_id") @db.Uuid
  journalId      String       @map("journal_id") @db.Uuid
  nextValue      Int          @default(1) @map("next_value")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  fiscalYear     FiscalYear   @relation(fields: [fiscalYearId], references: [id], onDelete: Restrict)
  journal        Journal      @relation(fields: [journalId], references: [id], onDelete: Restrict)

  @@unique([organizationId, fiscalYearId, journalId], map: "sequence_number_org_year_journal_key")
  @@map("sequence_number")
}

model FecExport {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  fiscalYearId   String       @map("fiscal_year_id") @db.Uuid
  checksum       String
  generatedAt    DateTime     @default(now()) @map("generated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  fiscalYear     FiscalYear   @relation(fields: [fiscalYearId], references: [id], onDelete: Restrict)

  @@index([organizationId, fiscalYearId], map: "fec_export_org_year_idx")
  @@map("fec_export")
}

model EntryLine {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  entryId        String       @map("entry_id") @db.Uuid
  accountId      String       @map("account_id") @db.Uuid
  debit          Decimal      @default(0) @db.Decimal(16, 2)
  credit         Decimal      @default(0) @db.Decimal(16, 2)
  projectId      String?      @map("project_id") @db.Uuid
  memberId       String?      @map("member_id") @db.Uuid
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  entry          Entry        @relation(fields: [entryId], references: [id], onDelete: Restrict)
  account        Account      @relation(fields: [accountId], references: [id], onDelete: Restrict)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: Restrict)
  member         Member?      @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@index([organizationId, accountId], map: "entry_line_org_account_idx")
  @@index([entryId], map: "entry_line_entry_idx")
  @@map("entry_line")
}

model Project {
  id             String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String          @map("organization_id") @db.Uuid
  code           String
  name           String
  description    String?
  type           ProjectType     @default(PROJECT)
  funder         String?
  plannedAmount  Decimal?        @map("planned_amount") @db.Decimal(16, 2)
  currency       String          @default("EUR")
  startDate      DateTime?       @map("start_date")
  endDate        DateTime?       @map("end_date")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  periods        ProjectPeriod[]
  entryLines     EntryLine[]

  @@unique([organizationId, code], map: "project_org_code_key")
  @@index([organizationId, type], map: "project_org_type_idx")
  @@map("project")
}

model ProjectPeriod {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  projectId      String       @map("project_id") @db.Uuid
  label          String
  plannedAmount  Decimal      @map("planned_amount") @db.Decimal(16, 2)
  startDate      DateTime?    @map("start_date")
  endDate        DateTime?    @map("end_date")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, label], map: "project_period_unique_label")
  @@index([organizationId, projectId], map: "project_period_org_project_idx")
  @@index([organizationId, startDate], map: "project_period_org_start_idx")
  @@map("project_period")
}

model Member {
  id             String                @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String                @map("organization_id") @db.Uuid
  firstName      String                @map("first_name")
  lastName       String                @map("last_name")
  email          String
  membershipType String                @map("membership_type")
  joinedAt       DateTime?             @map("joined_at")
  leftAt         DateTime?             @map("left_at")
  rgpdConsentAt  DateTime?             @map("rgpd_consent_at")
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  feeAssignments MemberFeeAssignment[]
  entryLines     EntryLine[]
  payments       MemberPayment[]

  @@unique([organizationId, email], map: "member_org_email_key")
  @@index([organizationId, membershipType], map: "member_org_type_idx")
  @@index([organizationId, joinedAt], map: "member_org_joined_idx")
  @@map("member")
}

model MembershipFeeTemplate {
  id             String                @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String                @map("organization_id") @db.Uuid
  label          String
  amount         Decimal               @db.Decimal(16, 2)
  currency       String                @default("EUR")
  membershipType String?               @map("membership_type")
  validFrom      DateTime              @map("valid_from")
  validUntil     DateTime?             @map("valid_until")
  isActive       Boolean               @default(true) @map("is_active")
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  assignments    MemberFeeAssignment[]

  @@index([organizationId, isActive], map: "membership_fee_template_org_active_idx")
  @@index([organizationId, membershipType], map: "membership_fee_template_org_type_idx")
  @@index([organizationId, validFrom], map: "membership_fee_template_org_valid_from_idx")
  @@map("membership_fee_template")
}

model MemberFeeAssignment {
  id             String                    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String                    @map("organization_id") @db.Uuid
  memberId       String                    @map("member_id") @db.Uuid
  templateId     String                    @map("template_id") @db.Uuid
  amount         Decimal                   @db.Decimal(16, 2)
  currency       String                    @default("EUR")
  status         MemberFeeAssignmentStatus @default(PENDING)
  periodStart    DateTime                  @map("period_start")
  periodEnd      DateTime?                 @map("period_end")
  dueDate        DateTime?                 @map("due_date")
  assignedAt     DateTime                  @default(now()) @map("assigned_at")
  autoAssigned   Boolean                   @default(false) @map("auto_assigned")
  entryId        String?                   @map("entry_id") @db.Uuid
  draftInvoiceId String?                   @map("draft_invoice_id")
  createdAt      DateTime                  @default(now()) @map("created_at")
  updatedAt      DateTime                  @updatedAt @map("updated_at")
  organization   Organization              @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  member         Member                    @relation(fields: [memberId], references: [id], onDelete: Restrict)
  template       MembershipFeeTemplate     @relation(fields: [templateId], references: [id], onDelete: Restrict)
  entry          Entry?                    @relation(fields: [entryId], references: [id], onDelete: SetNull)
  payments       MemberPayment[]

  @@unique([organizationId, memberId, templateId, periodStart], map: "member_fee_assignment_unique_period")
  @@index([organizationId, memberId], map: "member_fee_assignment_org_member_idx")
  @@index([organizationId, templateId], map: "member_fee_assignment_org_template_idx")
  @@index([organizationId, status], map: "member_fee_assignment_org_status_idx")
  @@map("member_fee_assignment")
}

model Attachment {
  id             String          @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String          @map("organization_id") @db.Uuid
  entryId        String          @map("entry_id") @db.Uuid
  url            String
  filename       String
  mime           String
  sha256         String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  entry          Entry           @relation(fields: [entryId], references: [id], onDelete: Cascade)
  memberPayments MemberPayment[] @relation("MemberPaymentSupportingDocument")

  @@index([organizationId, entryId], map: "attachment_org_entry_idx")
  @@map("attachment")
}

model User {
  id            String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  email         String         @unique
  passwordHash  String         @map("password_hash")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  roles         UserOrgRole[]
  refreshTokens RefreshToken[]

  @@map("user")
}

model UserOrgRole {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  role           UserRole
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  @@unique([userId, organizationId, role], map: "user_org_role_user_org_role_key")
  @@index([organizationId, role], map: "user_org_role_org_role_idx")
  @@map("user_org_role")
}

model RefreshToken {
  id                String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  userId            String         @map("user_id") @db.Uuid
  organizationId    String         @map("organization_id") @db.Uuid
  expiresAt         DateTime       @map("expires_at")
  revokedAt         DateTime?      @map("revoked_at")
  replacedByTokenId String?        @map("replaced_by_token_id") @db.Uuid
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization   @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  replacedBy        RefreshToken?  @relation("RefreshTokenReplacement", fields: [replacedByTokenId], references: [id])
  replacements      RefreshToken[] @relation("RefreshTokenReplacement")

  @@index([userId, organizationId], map: "refresh_token_user_org_idx")
  @@map("refresh_token")
}

enum UserRole {
  ADMIN
  TREASURER
  SECRETARY
  VIEWER
}

enum ProjectType {
  PROJECT
  SUBSIDY
}

enum MemberFeeAssignmentStatus {
  PENDING
  INVOICED
  PAID
  CANCELLED
}

enum MemberPaymentStatus {
  PENDING
  PAID
  OVERDUE
}

model MemberPayment {
  id                   String              @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId       String              @map("organization_id") @db.Uuid
  assignmentId         String              @unique @map("assignment_id") @db.Uuid
  memberId             String              @map("member_id") @db.Uuid
  status               MemberPaymentStatus @default(PENDING)
  amount               Decimal             @db.Decimal(16, 2)
  currency             String              @default("EUR")
  dueDate              DateTime?           @map("due_date")
  paidAt               DateTime?           @map("paid_at")
  entryId              String?             @map("entry_id") @db.Uuid
  supportingDocumentId String?             @map("supporting_document_id") @db.Uuid
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  organization         Organization        @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  assignment           MemberFeeAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  member               Member              @relation(fields: [memberId], references: [id], onDelete: Restrict)
  entry                Entry?              @relation(fields: [entryId], references: [id], onDelete: SetNull)
  supportingDocument   Attachment?         @relation("MemberPaymentSupportingDocument", fields: [supportingDocumentId], references: [id], onDelete: SetNull)

  @@index([organizationId, status], map: "member_payment_org_status_idx")
  @@index([organizationId, dueDate], map: "member_payment_org_due_date_idx")
  @@map("member_payment")
}

model DonationReceiptSequence {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  fiscalYearId   String       @map("fiscal_year_id") @db.Uuid
  nextValue      Int          @default(1) @map("next_value")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  fiscalYear     FiscalYear   @relation(fields: [fiscalYearId], references: [id], onDelete: Restrict)

  @@unique([organizationId, fiscalYearId], map: "donation_receipt_sequence_org_year_key")
  @@index([organizationId], map: "donation_receipt_sequence_org_idx")
  @@map("donation_receipt_sequence")
}

model Donation {
  id             String       @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  fiscalYearId   String       @map("fiscal_year_id") @db.Uuid
  entryId        String       @map("entry_id") @db.Uuid
  donorName      String       @map("donor_name")
  donorEmail     String?      @map("donor_email")
  donorAddress   String?      @map("donor_address")
  amount         Decimal      @db.Decimal(16, 2)
  currency       String       @default("EUR")
  receiptNumber  String       @map("receipt_number")
  receiptHash    String       @map("receipt_hash")
  receiptUrl     String       @map("receipt_url")
  receivedAt     DateTime     @map("received_at")
  issuedAt       DateTime     @map("issued_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  fiscalYear     FiscalYear   @relation(fields: [fiscalYearId], references: [id], onDelete: Restrict)
  entry          Entry        @relation(fields: [entryId], references: [id], onDelete: Restrict)

  @@unique([entryId], map: "donation_entry_id_key")
  @@unique([organizationId, fiscalYearId, receiptNumber], map: "donation_receipt_unique")
  @@index([organizationId, fiscalYearId], map: "donation_org_fiscal_year_idx")
  @@index([organizationId, receivedAt], map: "donation_org_received_idx")
  @@map("donation")
}
